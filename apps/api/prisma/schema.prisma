// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Tables
model User {
  id                 String             @id @default(uuid())
  firstName          String
  lastName           String
  username           String
  email              String             @unique
  password           String
  referralCode       String             @unique
  role               String             @default("user")
  phoneNumber        String?
  address            String?
  profilePictureUrl  String?
  totalPoint         Int                @default(0)
  referralPoints     ReferralPoint[]
  referralDiscounts  ReferralDiscount[]
  transactions       Transaction[]
  reviews            Review[]
  resetPasswordToken String?            @db.Char(255)
  isValid            Boolean            @default(false)

  @@map("users")
}

model EventOrganizer {
  id                String  @id @default(uuid())
  firstName         String
  lastName          String
  username          String
  email             String  @unique
  password          String
  role              String  @default("organizer")
  address           String?
  companyName       String
  phoneNumber       String
  pic               String
  events            Event[]
  profilePictureUrl String?

  @@map("eventorganizer")
}

model ReferralPoint {
  id     Int      @id @default(autoincrement())
  point  Int
  expiry DateTime
  user   User     @relation(fields: [userId], references: [id])
  userId String

  @@map("refferalpoints")
}

model ReferralDiscount {
  id       Int      @id @default(autoincrement())
  discount Int
  expiry   DateTime
  isUsed   Boolean  @default(false)
  user     User     @relation(fields: [userId], references: [id])
  userId   String

  @@map("refferaldiscounts")
}

// event model
model Event {
  id                  Int            @id @default(autoincrement())
  name                String
  type                String
  locationName        String
  location            String
  url                 String
  description         String
  detailedDescription String?       
  startDate           DateTime
  endDate             DateTime
  isPaid              Boolean
  price               Float      
  capacity            Int
  eo                  EventOrganizer @relation(fields: [eoId], references: [id])
  eoId                String
  tickets             EventTicket[]
  images              EventImage[]
  transactions        Transaction[]
  reviews             Review[]
  categoryId          Int
  category            Category       @relation(fields: [categoryId], references: [id])

  // New relationship with Tag
  tags Tag[] @relation("EventTags")

  @@map("events")
}

// tag model to store tags
model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  // New relationship with Event
  events Event[] @relation("EventTags")
}

model EventTicket {
  id                Int                 @id @default(autoincrement())
  name              String
  price             Int
  available         Int
  bookSeat          Int
  discount          Int
  discountStart     DateTime
  discountExpiry    DateTime
  startDate         DateTime
  endDate           DateTime
  event             Event               @relation(fields: [eventId], references: [id])
  eventId           Int

  @@map("eventtickets")
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String
  events Event[]

  @@map("category")
}

model EventImage {
  id      Int    @id @default(autoincrement())
  url     String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId Int

  @@map("eventimages")
}

model Transaction {
  id         String              @id 
  event      Event               @relation(fields: [eventId], references: [id])
  eventId    Int                  
  totalPrice Int
  user       User                @relation(fields: [userId], references: [id])
  userId     String
  status     String              @default("pending")

  @@map("transactions")
}

model Review {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  event    Event  @relation(fields: [eventId], references: [id])
  eventId  Int
  comments String
  rating   Int
  feedback String

  @@id([userId, eventId], name: "userId_eventId")
  @@map("reviews")
}
